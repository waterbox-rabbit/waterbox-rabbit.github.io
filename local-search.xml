<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Javascript数据结构（5）——树与二叉树的术语和性质</title>
    <link href="/2021/06/03/Javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%885%EF%BC%89%E2%80%94%E2%80%94%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%AF%E8%AF%AD%E5%92%8C%E6%80%A7%E8%B4%A8/"/>
    <url>/2021/06/03/Javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%885%EF%BC%89%E2%80%94%E2%80%94%E6%A0%91%E4%B8%8E%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%AF%E8%AF%AD%E5%92%8C%E6%80%A7%E8%B4%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本系列将参照《数据结构(C语言版)》第2版 (严蔚敏等) ，使用 Javascript 的方式复现书中的代码，以用于复习数据结构和 ES 语法。本文对应书中第五章 树与二叉树 的前四节内容。</p></blockquote><h2 id="树的基本术语"><a href="#树的基本术语" class="headerlink" title="树的基本术语"></a>树的基本术语</h2><p><img src="/post_img/jsA5/1.png"></p><p><strong>结点</strong>：树中的一个独立单元。包含一个数据元素及若于指向其子树的分支，如图中的 A、B、C、D 等。</p><p><strong>结点的度</strong>：结点拥有的子树数称为结点的度。例如，A 的度为 3，C 的度为 l，F 的度为 0。</p><p><strong>树的度</strong>：树的度是树内各结点度的最大值。图所示的树的度为 3。</p><p><strong>叶子</strong>： 度为 0 的结点称为叶子或终端结点。结点 K、L、F、G、M、I、J 都是树的叶子。</p><p><strong>非终端结点</strong>：度不为 0 的结点称为非终端结点或分支结点。除根结点之外，非终端结点也称为内部结点。</p><p><strong>双亲和孩子</strong>：结点的子树的根称为该结点的孩子，相应地，该结点称为孩子的双亲。例如，B 的双亲为 A，B 孩子有 E 和 F。</p><p><strong>兄弟</strong>：同一个双亲的孩子之间互称兄弟。例如 H、I 和 J 互为兄弟。</p><p><strong>祖先</strong>：从根到该结点所经分支上的所有结点。例如 M 的祖先为 A、D 和 H。</p><p><strong>子孙</strong>：以某结点为根的子树中的任一结点都称为该结点的子孙。如 B 的子孙为 E、K、L 和 F。</p><p><strong>层次</strong>：结点的层次从根开始定义起，根为第一层，根的孩子为第二层。树中任一结点的层次等千其双亲结点的层次加 1。</p><p><strong>堂兄弟</strong>：双亲在同一层的结点互为堂兄弟。例如，结点 G 与 E、F、H、I、J 互为堂兄弟。</p><p><strong>树的深度</strong>：树中结点的最大层次称为树的深度或高度。图所示的树的深度为 4。</p><p><strong>有序树和无序树</strong>：如果将树中结点的各子树看成从左至右是有次序的（即不能互换）则称该树为有序树，否则称为无序树。在有序树中最左边的子树的根称为第一个孩子，最右边的称为最后一个孩子。</p><p><strong>森林</strong>：是 m 棵互不相交的树的集合。对树中每个结点而言，其子树的集合即为森林。由此，也可以用森林和树相互递归的定义来描述树。</p><h2 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h2><p><strong>性质1</strong> 在二叉树的第 i 层至多有 2 ^ (i －1)个结点。(i &gt;= 1)</p><p><strong>性质2</strong> 深度为 k 的二叉树至多有 2 ^ (k - 1) 个结点。(k &gt;= 1)</p><p><strong>性质3</strong> 对任何一棵二叉树 T，如果其叶结点数为 n0，度为 2 的结点数为 n2，则 n0 ＝n2＋1。</p><p><strong>性质4</strong> 具有 n 个结点的完全二叉树的深度为 [log2n] + 1。（其中 [] 表示向下取整）</p><p><strong>性质5</strong>  如将一棵有 n 个结点的完全二叉树自顶向下，同层自左向右连续为结点编号 0，1，…，n - 1，则有： </p><ul><li><p>若 i = 0，则 i 无双亲,  若 i &gt; 0，则 i 的双亲为 [(i -1) / 2]。</p></li><li><p>若 2i + 1 &lt; n，则 i 的左子女为 2i + 1，若 2i + 2 &lt; n，则 i 的右子女为 2i + 2。</p></li><li><p>若结点编号 i 为偶数，且 i != 0，则左兄弟结点 i - 1。</p></li><li><p>若结点编号 i 为奇数，且 i != n - 1，则右兄弟结点为 i + 1。</p></li><li><p>结点 i 所在层次为 [log2(i + 1)]。</p></li></ul></br><p><strong>满二叉树</strong>：深度为 K 且含有 2^k - 1 个结点的二叉树。 图左所示是一棵深度为 4 的满二叉树。</p><p><strong>完全二叉树</strong>：深度为 K 的，有 n 个结点的二叉树，当且仅当其每一个结点都与深度为K的满 二叉树中编号从 1 至 n 的结点一一对应时，称之为完全二叉树。图右所示为一棵深度为 4 的完全二叉树。</p><p><img src="/post_img/jsA5/2.png"></p><p>完全二叉树的特点是：</p><ul><li>叶子结点只可能在层次最大的两层上出现；</li><li>对任一结点，若其右分支下的子孙的最大层次为 i，则其左分支下的子孙的最大层次必 为 i 或 i + 1。 图中 C 和 D 不是完全二叉树。</li></ul><h2 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h2><p>顺序存储结构使用一组地址连续的存储单元来存储数据元素，为了能够在存储结构中反映出结点之间的逻辑关系，必须将二叉树中的结点依照一定的规律安排在这组单元中。对于完全二叉树，只要从根起按层序存储即可，依次自上而下、自左至右存储结点元素，即将完全二叉树上编号为 i 的结点元素存储在如上定义的一维数组中下标为 i - 1 的分量中。以下的完全二叉树是按照上一个图的完全二叉树进行存储的：</p><p><img src="/post_img/jsA5/3.png"></p><p>顺序存储结构仅适用于完全二叉树。因为，在最坏的情况下，一个深度为 K 且只有 K 个结点的单支树（树中不存在度为 2 的结点）却需要长度为 2^k - 1 的一维数组。这造成了存储空间的极大浪费，所以对于一般二叉树，更适合采取链式存储结构。</p><p><img src="/post_img/jsA5/4.png"></p><p>在不同的存储结构中，实现二叉树的操作方法也不同，如找结点 x 的双亲，在三叉链表中很容易实现，而在二叉链表中则需从根指针出发巡查。由此，在具体应用中采用什么存储结构，除根据二叉树的形态之外还应考虑需进行何种操作。在以后的二叉树遍历及其应用的算法将采用二叉链表形式实现。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript数据结构（4）——栈与队列的应用2</title>
    <link href="/2021/06/02/Javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%884%EF%BC%89%E2%80%94%E2%80%94%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A82/"/>
    <url>/2021/06/02/Javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%884%EF%BC%89%E2%80%94%E2%80%94%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A82/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本系列将参照《数据结构(C语言版)》第2版 (严蔚敏等) ，使用 Javascript 的方式复现书中的代码，以用于复习数据结构和 ES 语法。本文对应书中第三章 栈和队列 的第六节内容，即案列分析与实现。</p></blockquote><h2 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h2><p>任何一个表达式都是由操作数 (operand)、运算符 (operator) 和界限符 (delimiter) 组成的，统称它们为单词。一般地，操作数既可以是常数，也可以是被说明为变量或常量的标识符；运算符可以分为算术运算符、关系运算符和逻辑运算符 3 类；基本界限符有左右括号和表达式结束符等。为了叙述的简洁，在此仅讨论简单算术表达式的求值问题，这种表达式只含加、减、乘、除 4 种运算符。</p></br><p>我们知道，算术四则运算遵循以下 3 条规则：</p><ul><li>先乘除，后加减；</li><li>从左算到右；</li><li>先括号内，后括号外。 </li></ul></br><p>根据上述 3 条运算规则，在运算的每一步中，任意两个相继出现的算符 A 和 B 之间的优先关系，至多是大于、小于和等于。表中定义了这种优先关系：</p><p><img src="/post_img/jsA42/1.png"></p><p><em>没错，我就是这么懒(<del>￣▽￣)</del></em></p><h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><p>初始化 OPTR 栈和 OPND 栈，将表达式起始符 “#” 压入OPTR栈。</p><p>扫描表达式，读入第一个字符 ch,，如果表达式没有扫描完毕至 “#” 或 OPTR 的栈顶元素不为 “#” 时，则循环执行以下操作：</p><ul><li><p>若 ch 不是运算符，则压入 OPND 栈，读入下一字符 ch；</p></li><li><p>若 ch 是运算符，则根据 OPTR 的栈顶元素和 ch 的优先级比较结果，做不同的处理；</p><ul><li><p>若是小于，则 ch 压入 OPTR 栈，读入下一字符 ch；</p></li><li><p>若是大于，则弹出 OPTR 栈顶的运算符，从 OPND 栈弹出两个数，进行相应运算，结果压入 OPND 栈；</p></li><li><p>若是等于，则 OPTR 的栈顶元素是 “(“ 且 ch 是 “)” 这时弹出 OPTR 栈顶的 “(“，相当于括号匹配成功，然后读入下一字符 ch。</p></li></ul></li></ul><p>OPND 栈顶元素即为表达式求值结果，返回此元素。</p><h2 id="算法实现与分析"><a href="#算法实现与分析" class="headerlink" title="算法实现与分析"></a>算法实现与分析</h2><p>首先为了方便起见，包装一个用于简单运算和用于比较运算符优先级的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//运算函数</span><br><span class="hljs-comment">//注意这里面传入的第一个num被放在了第二位，这是因为栈的位置导致的问题</span><br><span class="hljs-comment">//例如 4 - 1，入栈后出栈的顺序先是1后是4，所以第一个pop的数字应该被放在第二位</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Calculation</span>(<span class="hljs-params">num2, operator, num1</span>) </span>&#123;<br>  <span class="hljs-keyword">switch</span> (operator) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;+&quot;</span>:<br>      <span class="hljs-keyword">return</span> num1 + num2;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;-&quot;</span>:<br>      <span class="hljs-keyword">return</span> num1 - num2;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;*&quot;</span>:<br>      <span class="hljs-keyword">return</span> num1 * num2;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;/&quot;</span>:<br>      <span class="hljs-keyword">return</span> num1 / num2;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//在主函数中会定义以下的对象用于映射符号到数字上</span><br><span class="hljs-comment">//let operatorSign = &#123; &quot;+&quot;: 0, &quot;-&quot;: 1, &quot;*&quot;: 2, &quot;/&quot;: 3, &quot;(&quot;: 4, &quot;)&quot;: 5, &quot;#&quot;: 6 &#125;;</span><br><span class="hljs-comment">//这样使用函数的时候传入的是数字，传出的也是数字</span><br><span class="hljs-comment">//为什么要这么设计呢？我也不知道，写完了才觉得这么写显得很傻(~￣▽￣)~</span><br><br><span class="hljs-comment">//比较两个符号的优先级，其中1表示op1优先，0表示op2优先，-1表示优先级相等</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">operationComparison</span>(<span class="hljs-params">op1, op2</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> operatorComparisonArray = [<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>],<br>  ];<br><br>  <span class="hljs-keyword">return</span> operatorComparisonArray[op1][op2];<br>&#125;<br></code></pre></td></tr></table></figure></br><p>然后实现主函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//主函数实现</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">EvaluateExpression</span>(<span class="hljs-params">expression</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> operatorSign = &#123; <span class="hljs-string">&quot;+&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;-&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;*&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;/&quot;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&quot;(&quot;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&quot;)&quot;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&quot;#&quot;</span>: <span class="hljs-number">6</span> &#125;;<br>  <span class="hljs-comment">//储存数字的栈</span><br>  <span class="hljs-keyword">let</span> numStack = [];<br>  <span class="hljs-comment">//储存运算符的栈</span><br>  <span class="hljs-keyword">let</span> operatorStack = [];<br>  <span class="hljs-comment">//默认输入的表达式字符串中数字和符号用空格隔开且语法符合规则</span><br>  <span class="hljs-keyword">let</span> formulaArr = expression.split(<span class="hljs-string">&quot; &quot;</span>);<br>  <span class="hljs-comment">//读入第一个字符</span><br>  <span class="hljs-keyword">let</span> char = formulaArr.shift();<br>  <span class="hljs-comment">//将#压入栈中</span><br>  operatorStack.push(<span class="hljs-string">&quot;#&quot;</span>);<br><br>  <span class="hljs-comment">//只有当栈底为#同时读入的字符为#才停止循环</span><br>  <span class="hljs-keyword">while</span> (char != <span class="hljs-string">&quot;#&quot;</span> || operatorStack[operatorStack.length - <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<br>    <span class="hljs-comment">//如果字符不是运算符，则压入数字栈，并读取下一个字符</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">Object</span>.keys(operatorSign).includes(char)) &#123;<br>      numStack.push(<span class="hljs-built_in">parseFloat</span>(char));<br>      char = formulaArr.shift();<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">switch</span> (<br>      operationComparison(operatorSign[operatorStack[operatorStack.length - <span class="hljs-number">1</span>]], operatorSign[char])<br>      ) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>          <span class="hljs-comment">//应该注意这里并没有读入下一个字符</span><br>          <span class="hljs-comment">//因为运算符栈内可能不止一个运算符，可能有许多个，需要用读入的字符依次与栈内的运算符进行比较</span><br>          <span class="hljs-comment">//直到栈内的运算符小于等于新字符的优先级，压入新字符，或者与同优先级的运算符消掉</span><br>          numStack.push(<br>            Calculation(numStack.pop(), operatorStack.pop(), numStack.pop())<br>          );<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>          operatorStack.push(char);<br>          char = formulaArr.shift();<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> -<span class="hljs-number">1</span>:<br>          operatorStack.pop();<br>          char = formulaArr.shift();<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-comment">//最终数字栈栈顶即为结果</span><br>  <span class="hljs-built_in">console</span>.log(numStack.pop());<br>&#125;<br><br><span class="hljs-comment">//末尾一定要加#，否则会陷入死循环</span><br>EvaluateExpression(<span class="hljs-string">&quot;1 + 1 #&quot;</span>); <span class="hljs-comment">//2</span><br>EvaluateExpression(<span class="hljs-string">&quot;( 1 + 1 ) * 10 / 5 - 10 #&quot;</span>); <span class="hljs-comment">//-6</span><br></code></pre></td></tr></table></figure></br><p>我个人觉得算式末尾加一个 # 让人不爽，同时开头读入第一个字符和压 # 入栈让整个函数没有了整体性，所以个人在此基础上做了进一步考虑：将传入的算式划分成为符号数组，例如 [‘1’, ‘+’, ‘1’ ]，然后逐个符号遍历。但通过第一种实现方法可以知道，当栈顶运算符的优先级大于输入字符，将栈顶运算符pop运算后，并不会立刻读入新字符，而是将比较后的新字符与新的栈顶运算符再次比较，直到栈顶运算符的优先级小于等于新字符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">EvaluateExpression2</span>(<span class="hljs-params">expression</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> operatorSign = &#123; <span class="hljs-string">&quot;+&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-string">&quot;-&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;*&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;/&quot;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&quot;(&quot;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&quot;)&quot;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&quot;#&quot;</span>: <span class="hljs-number">6</span> &#125;;<br>  <span class="hljs-keyword">let</span> numStack = [];<br>  <span class="hljs-keyword">let</span> operatorStack = [];<br><br>  <span class="hljs-comment">//读入算式后划分为符号数组遍历</span><br>  <span class="hljs-comment">//例如传入1 + 1，那么就会遍历[&#x27;1&#x27;, &#x27;+&#x27;, &#x27;1&#x27;]</span><br>  expression.split(<span class="hljs-string">&#x27; &#x27;</span>).forEach(<span class="hljs-function"><span class="hljs-params">char</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">//如果符号是非运算符，则压入数字栈</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">Object</span>.keys(operatorSign).includes(char)) numStack.push(<span class="hljs-built_in">parseFloat</span>(char));<br>    <span class="hljs-keyword">else</span><br>      <span class="hljs-comment">//这里设置一个只能通过break才能脱出的循环，当栈内运算符小于等于新字符或者栈内为空时，才会脱出循环并读入新字符</span><br>      <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (operatorStack.length == <span class="hljs-number">0</span>) &#123; operatorStack.push(char); <span class="hljs-keyword">break</span>; &#125;<br>        <span class="hljs-comment">//获取比较的结果</span><br>        <span class="hljs-keyword">let</span> compareTemp;<br>        <span class="hljs-keyword">if</span> (operatorStack.length != <span class="hljs-number">0</span>)<br>          compareTemp = operationComparison(operatorSign[operatorStack[operatorStack.length - <span class="hljs-number">1</span>]], operatorSign[char]);<br>        <span class="hljs-comment">//当栈内运算符大于新字符的优先级，运算并继续进行循环，直到出现其他情况</span><br>        <span class="hljs-keyword">if</span> (compareTemp == <span class="hljs-number">1</span>)<br>          numStack.push(Calculation(numStack.pop(), operatorStack.pop(), numStack.pop()));<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (compareTemp == <span class="hljs-number">0</span>) &#123;<br>          operatorStack.push(char);<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>          operatorStack.pop();<br>          <span class="hljs-keyword">break</span>;<br>        &#125;<br>      &#125;<br>  &#125;)<br>  <span class="hljs-built_in">console</span>.log(Calculation(numStack.pop(), operatorStack.pop(), numStack.pop()));<br>&#125;<br></code></pre></td></tr></table></figure></br><p><strong>高情商：本题目主要要考虑读入字符的时机问题，思考清楚后就很容易了。</strong></p><p><strong>低情商：坑真nm的多。</strong></p><p><img src="/post_img/jsA42/2.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript数据结构（4）——栈与队列的应用</title>
    <link href="/2021/05/31/Javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%884%EF%BC%89%E2%80%94%E2%80%94%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/2021/05/31/Javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%884%EF%BC%89%E2%80%94%E2%80%94%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本系列将参照《数据结构(C语言版)》第2版 (严蔚敏等) ，使用 Javascript 的方式复现书中的代码，以用于复习数据结构和 ES 语法。本文对应书中第三章 栈和队列 的第六节内容，即案列分析与实现。</p></blockquote><h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><p>当将一个十进制整数 N 转换为八进制数时，在计算过程中，把 N 与 8 求余得到的八进制数的各位依次进栈，计算完毕后将栈中的八进制数依次出栈输出，输出结果就是待求得的八进制数。</p></br><p>伪代码：</p><ol><li><p>初始化一个空栈 S。</p><ul><li>当十进制数N非零时，循环执行以下操作：</li></ul></li><li><p>把 N 与 8 求余得到的八进制数压入栈 S；</p><ul><li>N 更新为 N 与 8 的商。</li></ul></li><li><p>当栈 S 非空时，循环执行以下操作：</p><ul><li><p>弹出栈顶元素 e；</p></li><li><p>输出 e。</p></li></ul></li></ol></br><p>算法实现，时间复杂度为 O(log n)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//进制转换函数，num表示输入的十进制数字，n为要转换的进制</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">conversion</span>(<span class="hljs-params">num, n</span>) </span>&#123;<br>  <span class="hljs-comment">//十以上进制的超过十的数需要使用数字表示</span><br>  <span class="hljs-keyword">let</span> ref = &#123;<br>    <span class="hljs-number">10</span>: <span class="hljs-string">&quot;a&quot;</span>,<br>    <span class="hljs-number">11</span>: <span class="hljs-string">&quot;b&quot;</span>,<br>    <span class="hljs-number">12</span>: <span class="hljs-string">&quot;c&quot;</span>,<br>    <span class="hljs-number">14</span>: <span class="hljs-string">&quot;d&quot;</span>,<br>    <span class="hljs-number">15</span>: <span class="hljs-string">&quot;e&quot;</span>,<br>    <span class="hljs-number">16</span>: <span class="hljs-string">&quot;f&quot;</span>,<br>    <span class="hljs-number">17</span>: <span class="hljs-string">&quot;g&quot;</span>,<br>    <span class="hljs-number">18</span>: <span class="hljs-string">&quot;h&quot;</span>,<br>  &#125;;<br>  <span class="hljs-keyword">let</span> stack = [];<br>  <span class="hljs-keyword">let</span> output = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-comment">//当num不为零时，执行以下步骤</span><br>  <span class="hljs-keyword">while</span> (num) &#123;<br>    stack.push(num % n); <span class="hljs-comment">//将余数压入栈中</span><br>    num = <span class="hljs-built_in">Math</span>.floor(num / n); <span class="hljs-comment">//取商</span><br>  &#125;<br>  <span class="hljs-comment">//逐个出栈生成结果</span><br>  <span class="hljs-keyword">while</span> (stack.length != <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">let</span> e = stack.pop();<br>    <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">in</span> ref) output += ref[e];<br>    <span class="hljs-keyword">else</span> output += e;<br>  &#125;<br>  <span class="hljs-built_in">console</span>.log(output);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="括号匹配检验"><a href="#括号匹配检验" class="headerlink" title="括号匹配检验"></a>括号匹配检验</h2><p>检验算法借助一个栈，每当读入一个左括号，则直接入栈，等待相匹配的同类右括号；每当读入一个右括号，若与当前栈顶的左括号类型相同，则二者匹配，将栈顶的左括号出栈，直到表达式扫描完毕。</p><p>在处理过程中，还要考虑括号不匹配出错的情况。例如，当出现 (( )[ ])) 这种情况时，由于前面入栈的左括号均已和后面出现的右括号相匹配，栈已空，因此最后扫描的右括号不能得到匹配；出现 [([]) 这种错误，当表达式扫描结束时，栈中还有一个左括号没有匹配；出现 (()]  这种错误显然是栈顶的左括号和最后的右括号不匹配。</p></br><p>伪代码：</p><ol><li><p>初始化一个空栈 S。</p></li><li><p>设置一标记性变量 flag， 用来标记匹配结果以控制循环及返回结果，1 表示正确匹配，0 表示错误匹配，flag 初值为 1。</p></li><li><p>扫描表达式，依次读入字符 ch，如果表达式没有扫描完毕或 flag 非零，则循环执行以下操作：</p><ul><li><p>若 ch是左括号 “[“ 或 “(“ 则将其压入栈；</p></li><li><p>若 ch是右括号 “)” 则根据当前栈顶元素的值分情况考虑：若栈非空且栈顶元素是 “(“ 则正确匹配，否则错误匹配，flag 置为 0；</p></li><li><p>若 ch是右括号 “]” 则根据当前栈顶元素的值分情况考虑：若栈非空且栈顶元素是 “[“ 则正确匹配，否则错误匹配，flag 置为 0。</p></li></ul></li><li><p>退出循环后，如果栈空且 flag 值为 1 则匹配成功，返回 true，否则返回 false。</p></li></ol></br><p>代码实现，时间复杂度和空间复杂度均为 O(n)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//括号匹配</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Matching</span>(<span class="hljs-params">txt</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> ref = &#123; <span class="hljs-string">&quot;&#123;&quot;</span>: <span class="hljs-string">&quot;&#125;&quot;</span>, <span class="hljs-string">&quot;[&quot;</span>: <span class="hljs-string">&quot;]&quot;</span>, <span class="hljs-string">&quot;(&quot;</span>: <span class="hljs-string">&quot;)&quot;</span> &#125;;<br>  <span class="hljs-comment">//栈中最顶层的括号（如果使用自己写的栈类，可以用getStackTop方法）</span><br>  <span class="hljs-keyword">let</span> curBracket = <span class="hljs-string">&quot;&quot;</span>;<br>  <span class="hljs-keyword">let</span> stack = [];<br>  <span class="hljs-comment">//Javascript中的forEach方法无法return或break，所以设定一个flag来判断输入的括号是否匹配</span><br>  <span class="hljs-keyword">let</span> flag = <span class="hljs-literal">true</span>;<br><br>  <span class="hljs-comment">//将输入的字符串分割成单字符数组并遍历</span><br>  txt.split(<span class="hljs-string">&quot;&quot;</span>).forEach(<span class="hljs-function">(<span class="hljs-params">char</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">//如果是左括号，则压入栈中</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Object</span>.keys(ref).includes(char)) &#123;<br>      stack.push(char);<br>      curBracket = char;<br>    &#125;<br><br>    <span class="hljs-comment">//如果是右括号，則匹配棧中最頂層的括號</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Object</span>.values(ref).includes(char)) &#123;<br>      <span class="hljs-keyword">if</span> (char == ref[curBracket]) &#123;<br>        stack.pop();<br>        stack.length &gt; <span class="hljs-number">0</span><br>          ? (curBracket = stack[stack.length - <span class="hljs-number">1</span>])<br>          : (curBracket = <span class="hljs-string">&quot;&quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> flag = <span class="hljs-literal">false</span>;<br>    &#125;<br>  &#125;);<br><br>  <span class="hljs-comment">//当栈为空，且没有遇到错误时，匹配成功</span><br>  <span class="hljs-keyword">if</span> (stack.length == <span class="hljs-number">0</span> &amp;&amp; flag) <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;success!&quot;</span>);<br>  <span class="hljs-keyword">else</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;error!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>艺术流派简介——未来主义</title>
    <link href="/2021/05/31/%E8%89%BA%E6%9C%AF%E6%B5%81%E6%B4%BE%E7%AE%80%E4%BB%8B%E2%80%94%E2%80%94%E6%9C%AA%E6%9D%A5%E4%B8%BB%E4%B9%89/"/>
    <url>/2021/05/31/%E8%89%BA%E6%9C%AF%E6%B5%81%E6%B4%BE%E7%AE%80%E4%BB%8B%E2%80%94%E2%80%94%E6%9C%AA%E6%9D%A5%E4%B8%BB%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>”我们会炸掉所有博物馆和图书馆，然后与传统道德、女权主义以及所有的机会主义和功利主义者们做个了断。“</p><p>——《未来主义宣言》</p></blockquote></br><p><img src="/post_img/artSch1/2.jpg"></p><center>“我们宣布，世界的辉煌已被一种新的美所填充：即速度之美！“   ——《未来主义宣言》</center></br><p><strong>未来主义（Futurismo）</strong>是20世纪初起源于意大利的一场艺术和社会运动。它强调活力、速度、技术、青春、暴力以及汽车、飞机和工业城市等物体，旨在抛弃传统，塑造一个崭新的意大利。其关键人物有菲利波·托马索·马里内蒂（Filippo Tommaso Marinetti）和翁贝托·博乔尼（Umberto Boccioni）等。这场艺术运动影响了包括绘画、音乐、建筑和诗歌等诸多方面，同时与意识形态有很大联系。</p><h2 id="未来主义绘画"><a href="#未来主义绘画" class="headerlink" title="未来主义绘画"></a>未来主义绘画</h2><blockquote><p>“应该把万物运动论，作为一种动态感，运用到绘画之中…”   —— Boccioni</p></blockquote><p><img src="/post_img/artSch1/1.jpg"></p><p>《城市的崛起》由意大利的 Umberto Boccioni 在上世纪初期所创作完成。图中高耸的楼房、奔跑的马匹与被挤开而扭曲的人群体现了未来主义中一些最典型的要素：<strong>速度、暴力与科技</strong>。</p><p><img src="/post_img/artSch1/3.jpg"></p><center>Giacomo Balla, 1912, Dinamismo di un Cane al Guinzaglio</center></br><p>未来主义者的画作都体现了他们对感知世界不断运动的坚持。例如这幅画描绘了一只狗，它的腿、尾巴以及遛它的女人的脚都被放大成模糊的运动。它说明了未来主义绘画技术宣言的戒律：“由于图像在视网膜上的停留，运动物体会不断地相互叠加，其形式变化犹如振动。因此奔跑的马不只有四条腿，而可能有二十条。” </p>]]></content>
    
    
    
    <tags>
      
      <tag>艺术流派</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript数据结构（3）——循环队列和链列</title>
    <link href="/2021/05/29/Javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%883%EF%BC%89%E2%80%94%E2%80%94%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%E5%92%8C%E9%93%BE%E5%88%97/"/>
    <url>/2021/05/29/Javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%883%EF%BC%89%E2%80%94%E2%80%94%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97%E5%92%8C%E9%93%BE%E5%88%97/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本系列将参照《数据结构(C语言版)》第2版 (严蔚敏等) ，使用 Javascript 的方式复现书中的代码，以用于复习数据结构和 ES 语法。本文对应书中第三章 栈和队列 的第五节内容，即队列部分。</p></blockquote><h2 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h2><p>队列的操作与栈的操作类似，不同的是，删除是在表的头部（即队头）进行。和顺序栈相类似，在队列的顺序存储结构中，除了用一组地址连续的存储单元依次存放从队列头到队列尾的元素之外，尚需附设两个整型变最 front 和 rear 分别指示队列头元素及队列尾元素的位置（后面分别称为头指针和尾指针）。</p><p><img src="/post_img/jsA3/3.png"></p><p>为了描述方便起见，在此约定：初始化创建空队列时，令 front = rear = 0, 每当插入新的队列尾元素时，尾指针 rear 增 1；每当删除队列头元素时，头指针 front 增 1。因此在非空队列中，头指针始终指向队列头元素，而尾指针始终指向队列尾元素的下一个位置，如图所示。</p><p><img src="/post_img/jsA3/1.png"></p><p>我们发现在几次入队出队操作后，队列的实际可用空间未占满，但再次入队会导致溢出，我们成为 “假溢出”。怎样解决这种 “假溢出” 问题呢？一个较巧妙的办法是将顺序队列变为一个环状的空间，如下图所示，称之为<strong>循环队列</strong>。</p><p><img src="/post_img/jsA3/2.png"></p><p>在循环队列中，我们无法通过头指针和尾指针的相等来判断队满的情况，因为队空时头尾指针也是相同的。这时我们可以另设一个标志判断队满，或者少用一个空间元素让 rear 始终指向空白，然后改变判断条件：</p><ul><li>队空的条件：Q.front == Q.rear </li><li>队满的条件：(Q.rear + 1) % MAXSIZE == Q.front</li></ul><p>下面用第二种方法（少用一个空间元素）来实现循环队列：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Queue</span> </span>&#123;<br>  <span class="hljs-comment">//初始化空间大小，用索引来模拟头尾指针</span><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">MAXSIZE</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.size = MAXSIZE;<br>    <span class="hljs-built_in">this</span>.base = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-built_in">this</span>.size);<br>    <span class="hljs-built_in">this</span>.rear = <span class="hljs-built_in">this</span>.front = <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-comment">//这里考虑了rear与front相减为负的情况</span><br>  <span class="hljs-function"><span class="hljs-title">GetQueueLength</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">this</span>.rear - <span class="hljs-built_in">this</span>.front + <span class="hljs-built_in">this</span>.size) % <span class="hljs-built_in">this</span>.size;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">EnQueue</span>(<span class="hljs-params">value</span>)</span> &#123;<br>    <span class="hljs-comment">//判断队满</span><br>    <span class="hljs-keyword">if</span> ((<span class="hljs-built_in">this</span>.rear + <span class="hljs-number">1</span>) % <span class="hljs-built_in">this</span>.size == <span class="hljs-built_in">this</span>.front) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">this</span>.base[<span class="hljs-built_in">this</span>.rear] = value;<br>    <span class="hljs-comment">//当rear位于数组最尾端时，元素入队后将rear指针移回最开头</span><br>    <span class="hljs-built_in">this</span>.rear = (<span class="hljs-built_in">this</span>.rear + <span class="hljs-number">1</span>) % <span class="hljs-built_in">this</span>.size;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">DeQueue</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">//判断队空</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.rear == <span class="hljs-built_in">this</span>.front) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">this</span>.base[<span class="hljs-built_in">this</span>.front] = <span class="hljs-literal">null</span>;<br>    <span class="hljs-built_in">this</span>.front = (<span class="hljs-built_in">this</span>.front + <span class="hljs-number">1</span>) % <span class="hljs-built_in">this</span>.size;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">GetQueueHead</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">//判断队空</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.front == <span class="hljs-built_in">this</span>.rear) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.base[<span class="hljs-built_in">this</span>.front];<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">QueueTraverse</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.base.join(<span class="hljs-string">&quot; -&gt; &quot;</span>));<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> queue1 = <span class="hljs-keyword">new</span> Queue(<span class="hljs-number">6</span>);<br>queue1.EnQueue(<span class="hljs-number">1</span>);<br>queue1.EnQueue(<span class="hljs-number">2</span>);<br>queue1.EnQueue(<span class="hljs-number">3</span>);<br>queue1.EnQueue(<span class="hljs-number">4</span>);<br>queue1.EnQueue(<span class="hljs-number">5</span>);<br>queue1.DeQueue();<br>queue1.EnQueue(<span class="hljs-number">6</span>);<br>queue1.QueueTraverse(); <span class="hljs-comment">// 2 3 4 5 6</span><br></code></pre></td></tr></table></figure><h2 id="链队"><a href="#链队" class="headerlink" title="链队"></a>链队</h2><p>链队是指采用链式存储结构实现的队列。通常链队用单链表来表示。一个链队显然需要两个分别指示队头和队尾的指针（分别称为头指针和尾指针）才能唯一确定。这里和线性表的单链表一样，为了操作方便起见，给链队添加一个头结点，并令头指针始终指向头结点。</p><p><img src="/post_img/jsA3/4.png"></p><p>链队的代码实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//单节点类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QueueNode</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">value</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.value = value;<br>    <span class="hljs-built_in">this</span>.next = <span class="hljs-literal">null</span>;<br>  &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Queue2</span> </span>&#123;<br>  <span class="hljs-comment">//链队的初始化就不必考虑最大内存的分配问题</span><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.head = <span class="hljs-keyword">new</span> QueueNode(<span class="hljs-string">&quot;head&quot;</span>); <span class="hljs-comment">//头指针</span><br>    <span class="hljs-built_in">this</span>.front = <span class="hljs-built_in">this</span>.rear = <span class="hljs-built_in">this</span>.head;<br>    <span class="hljs-built_in">this</span>.length = <span class="hljs-number">0</span>; <span class="hljs-comment">//链队的长度</span><br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">GetQueueLength</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.length;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">EnQueue</span>(<span class="hljs-params">value</span>)</span> &#123;<br>    <span class="hljs-comment">//链队的入队不用考虑队满的情况</span><br>    <span class="hljs-keyword">let</span> temp = <span class="hljs-keyword">new</span> QueueNode(value);<br>    <span class="hljs-built_in">this</span>.rear.next = temp;<br>    <span class="hljs-built_in">this</span>.rear = <span class="hljs-built_in">this</span>.rear.next;<br>    <span class="hljs-built_in">this</span>.length++;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">DeQueue</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">//判断队空</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.front == <span class="hljs-built_in">this</span>.rear) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">this</span>.front.next = <span class="hljs-built_in">this</span>.front.next.next;<br>    <span class="hljs-built_in">this</span>.length--;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">GetQueueHead</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">//判断队空</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.front == <span class="hljs-built_in">this</span>.rear) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.front.next.value;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">QueueTraverse</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-comment">//单链表的遍历</span><br>    <span class="hljs-keyword">let</span> cur = <span class="hljs-built_in">this</span>.front.next;<br>    <span class="hljs-keyword">let</span> txt = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">while</span> (cur) &#123;<br>      txt += cur.value + <span class="hljs-string">&quot; -&gt; &quot;</span>;<br>      cur = cur.next;<br>    &#125;<br>    <span class="hljs-built_in">console</span>.log(txt);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> queue2 = <span class="hljs-keyword">new</span> Queue2();<br>queue2.EnQueue(<span class="hljs-number">1</span>);<br>queue2.EnQueue(<span class="hljs-number">2</span>);<br>queue2.EnQueue(<span class="hljs-number">3</span>);<br>queue2.EnQueue(<span class="hljs-number">4</span>);<br>queue2.EnQueue(<span class="hljs-number">5</span>);<br>queue2.DeQueue();<br>queue2.EnQueue(<span class="hljs-number">6</span>);<br>queue2.QueueTraverse(); <span class="hljs-comment">// 2 3 4 5 6</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript数据结构（2）——栈与递归</title>
    <link href="/2021/05/27/Javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    <url>/2021/05/27/Javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%882%EF%BC%89%E2%80%94%E2%80%94%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本系列将参照《数据结构(C语言版)》第2版 (严蔚敏等) ，使用 Javascript 的方式复现书中的代码，以用于复习数据结构和ES语法。本文对应书中第三章 栈和队列 的第四节内容，即栈与递归。</p></blockquote><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>所谓递归是指，若在一个函数、过程或者数据结构定义的内部又直接（或间接）出现定义本身的应用，则称它们是递归的，或者是递归定义的。例如斐波那契数列就是递归定义的：</p><blockquote><p>斐波那契数列除第一位和第二位为 1 外，后续位为前两位数字之和。</p><p>1 1 2 3 5 8 13 21</p></blockquote><p><img src="/post_img/jsA2/1.png"></p><p>下面以递归的形式实现斐波那契数列：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//n为要获取的位对应的数字</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Fib</span>(<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span> || n == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> Fib(n - <span class="hljs-number">1</span>) + Fib(n - <span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(Fib(<span class="hljs-number">10</span>)); <span class="hljs-comment">// 55</span><br></code></pre></td></tr></table></figure><p>这种递归的代码实现方法叫做 “分治法”。采取 “分治法” 进行递归求解的问题需要满足以下三个条件。</p><ul><li> 能将一个问题转变成一个新问题，而新问题与原问题的解法相同或类同，不同的仅是处理的对象，并且这些处理对象更小且变化有规律。 </li><li> 可以通过上述转化而使问题简化。 </li><li> 必须有一个明确的递归出口，或称递归的边界。</li></ul><p><img src="/post_img/jsA2/2.png"></p><h2 id="n阶Hanoi塔问题"><a href="#n阶Hanoi塔问题" class="headerlink" title="n阶Hanoi塔问题"></a>n阶Hanoi塔问题</h2><p>假设有 3 个分别命名为 A、 B 和 C 的塔座，在塔座 A 上插有 n 个直径大小各不相同，依小到大编号为 1, 2, … , n 的圆盘。现要求将塔座 A 上的n个圆盘移至塔座 C 上，并仍按同样顺序叠排，圆盘移动时必须遵循下列规则： </p><ul><li>每次只能移动一个圆盘； </li><li>圆盘可以插在 A、B 和 C 中的任一塔座上； </li><li>任何时刻都不能将一个较大的圆盘压在较小的圆盘之上。</li></ul><p><strong>问题分析</strong></p><p>如何实现移动圆盘的操作呢？可以用分治求解的递归方法来解决这个问题。设 A 柱上最初的盘子总数为 n，则当 n = l 时，只要将编号为 1 的圆盘从塔座 A 直接移至塔座 C 上即可；否则，执行以下三步：</p><ul><li>用 C 柱做过渡，将 A 柱上的 (n - 1) 个盘子移到 B 柱上；</li><li>将 A 柱上最后一个盘子直接移到 C 柱上；</li><li>用 A 柱做过渡，将 B 柱上的 (n - 1) 个盘子移到 C 柱上。</li></ul><p>具体过程如图所示：</p><p><img src="/post_img/jsA2/3.png"></p><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//用一个全局变量记录移动了多少次，根据计算，n个盘子需要移动2^n - 1次</span><br><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Move</span>(<span class="hljs-params">startNode, n, EndNode</span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(startNode + <span class="hljs-string">&quot; move &quot;</span> + n + <span class="hljs-string">&quot;  to &quot;</span> + EndNode);<br>    count++;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Hanoi</span>(<span class="hljs-params">n, A, B, C</span>) </span>&#123;<br>    <span class="hljs-comment">//如果n=l, 则直接将编号为l的圆盘从A移到C, 不经过B，递归结束。</span><br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) Move(A, n, C);<br>    <span class="hljs-keyword">else</span> &#123;<br>        Hanoi(n - <span class="hljs-number">1</span>, A, C, B);<br>        Move(A, n, C);<br>        Hanoi(n - <span class="hljs-number">1</span>, B, A, C);<br>    &#125;<br>&#125;<br><br>Hanoi(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>);<br><span class="hljs-built_in">console</span>.log(count); <span class="hljs-comment">//15</span><br></code></pre></td></tr></table></figure><h2 id="递归算法的时间复杂度"><a href="#递归算法的时间复杂度" class="headerlink" title="递归算法的时间复杂度"></a>递归算法的时间复杂度</h2><p>我们可以使用递归树的方法分析实现斐波那契数列所用的递归算法的时间复杂度：</p><p><img src="/post_img/jsA2/4.png"></p><p>可见，随着 n 的增大，时间复杂度为 O(2^n)，这让我们无法接受。</p><p>我们注意到，用递归计算斐波那契数列会导致同一位的重复计算，例如计算第五位 5 = 3 + 2 的时候，第三位 2 = 1 + 1 就被重算了两次。所以我们可以考虑用数组把算过的数字进行保存，将时间复杂度减小到 O(n)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> fibTemp = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>];<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Fib2</span>(<span class="hljs-params">n</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span> || n == <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//要注意索引始终少一</span><br>    <span class="hljs-keyword">if</span> (fibTemp[n - <span class="hljs-number">1</span>] != <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span> fibTemp[n - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">let</span> result = Fib2(n - <span class="hljs-number">1</span>) + Fib2(n - <span class="hljs-number">2</span>);<br>        fibTemp[n - <span class="hljs-number">1</span>] = result;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125; <br>&#125;<br><br><span class="hljs-built_in">console</span>.log(Fib2(<span class="hljs-number">10</span>));<br></code></pre></td></tr></table></figure><p>通常在生产环境中很少使用递归算法，排除算法设计本身的因素，递归带来的效率问题主要是函数调用带来的额外开销（函数的入栈出栈），以及栈容量的限制。<strong>最主要的是，自己写的别人可能看不懂。</strong></p><h2 id="递归过程与递归工作栈"><a href="#递归过程与递归工作栈" class="headerlink" title="递归过程与递归工作栈"></a>递归过程与递归工作栈</h2><p>在高级语言编制的程序中，调用函数和被调用函数之间的链接及信息交换需通过栈来进行。通常，当在一个函数的运行期间调用另一个函数时，在运行被调用函数之前，系统需先完成 3 件事：</p><ul><li>将所有的实参、返回地址等信息传递给被调用函数保存；</li><li>为被调用函数的局部变量分配存储区；</li><li>将控制转移到被调函数的入口。 </li></ul><p>而从被调用函数返回调用函数之前，系统也应完成 3 件工作：</p><ul><li>保存被调函数的计算结果；</li><li>释放被调函数的数据区；</li><li>依照被调函数保存的返回地址将控制转移到调用函数。</li></ul><p>为了保证递归函数正确执行，系统需设立一个 “递归工作栈” 作为整个递归函数运行期间使用的数据存储区。每一层递归所需信息构成一个工作记录，其中包括所有的实参、所有的局部变量，以及上一层的返回地址。</p>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Javascript数据结构（1）——顺序栈和链栈的实现</title>
    <link href="/2021/05/18/Javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%881%EF%BC%89%E2%80%94%E2%80%94%E9%A1%BA%E5%BA%8F%E6%A0%88%E5%92%8C%E9%93%BE%E9%98%9F/"/>
    <url>/2021/05/18/Javascript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%881%EF%BC%89%E2%80%94%E2%80%94%E9%A1%BA%E5%BA%8F%E6%A0%88%E5%92%8C%E9%93%BE%E9%98%9F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>本系列将参照《数据结构(C语言版)》第2版 (严蔚敏等) ，使用 Javascript 的方式复现书中的代码，以用于复习数据结构和 ES 语法。本文对应书中第三章 栈和队列 的前三节内容，即顺序栈和链栈的基本实现。</p></blockquote><h2 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h2><p>顺序栈是指利用顺序存储结构实现的栈，即利用一组地址连续的存储单元依次存放自栈底到栈顶的数据元素，同时附设指针 top 指示栈顶元素在顺序栈中的位置，指针 base 指示栈底位置，stacksize 表示栈的最大容量。</p><p><img src="/post_img/jsA1/1.png"></p><p>顺序栈初始化，入栈，出栈和获取栈顶元素的代码实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> MAXSIZE = <span class="hljs-number">100</span>;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack2</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">InitStack</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.items = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(MAXSIZE); <span class="hljs-comment">//使用Javascript的Array对象构建一个数组空间</span><br>    <span class="hljs-built_in">this</span>.base = <span class="hljs-built_in">this</span>.top = <span class="hljs-number">0</span>; <span class="hljs-comment">//用数组下标来模拟指针</span><br>    <span class="hljs-built_in">this</span>.stacksize = MAXSIZE;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">Push</span>(<span class="hljs-params">num</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.top - <span class="hljs-built_in">this</span>.base == <span class="hljs-built_in">this</span>.stacksize) <span class="hljs-keyword">return</span> <span class="hljs-built_in">Error</span>; <span class="hljs-comment">//判断栈是否已满</span><br>    <span class="hljs-built_in">this</span>.items[top] = num;<br>    top++;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">Pop</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.top == <span class="hljs-built_in">this</span>.base) <span class="hljs-keyword">return</span> <span class="hljs-built_in">Error</span>; <span class="hljs-comment">//判断栈是否为空</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items[top--];<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">GetTop</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.top == <span class="hljs-built_in">this</span>.base) <span class="hljs-keyword">return</span> <span class="hljs-built_in">Error</span>; <span class="hljs-comment">//判断栈是否为空</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.items[top - <span class="hljs-number">1</span>]; <span class="hljs-comment">//由于栈顶指针top对应的数组索引等于栈顶元素的索引加一，所以这里要减去一</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h2><p>链栈是指采用链式存储结构实现的栈。通常链栈用单链表来表示。由于栈的主要操作是在栈顶插入和删除， 显然以链表的头部作为栈顶是最方便的，而且没必要像单链表那样为了操作方便附加一个头结点。</p><p><img src="/post_img/jsA1/2.png"></p><p>链栈的代码实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//新建一个StackNode类模拟链表节点，value用来储存值，NextStackNode用于存放指针</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StackNode</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">value</span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>        <span class="hljs-built_in">this</span>.NextStackNode = <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack3</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">InitStack</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-built_in">this</span>.base = <span class="hljs-built_in">this</span>.top = <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">Push</span>(<span class="hljs-params">num</span>)</span> &#123;<br>        <span class="hljs-keyword">let</span> temp = <span class="hljs-keyword">new</span> StackNode(num);<br>        temp.NextStackNode = <span class="hljs-built_in">this</span>.top; <span class="hljs-comment">//让新节点的指针指向原有栈顶，然后让栈顶指针指向新节点，这样新节点就成为新的栈顶</span><br>        <span class="hljs-built_in">this</span>.top = temp;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">Pop</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.top == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">Error</span>; <span class="hljs-comment">//判断节点是否为空</span><br>        <span class="hljs-keyword">let</span> temp = <span class="hljs-built_in">this</span>.top.value; <span class="hljs-comment">//暂存要Pop的节点的值，在最后返回</span><br>        <span class="hljs-built_in">this</span>.top = <span class="hljs-built_in">this</span>.top.NextStackNode; <span class="hljs-comment">//让指向栈顶的节点指向下一位</span><br>        <span class="hljs-keyword">return</span> temp;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">GetTop</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.top == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">Error</span>; <span class="hljs-comment">//判断节点是否为空</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.top.value;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
